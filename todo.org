#+TITLE: Principle of deparser implementation on FPGA (P4)
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS

* Introduction

** Problematique
- Cas de travail : 
| entete | taille (bits) |
| Eth    |           112 |
| IP     |           160 |
| TCP    |           160 |



 - Nombre de combinaisons de sorties : 2^n-1 avec n nombre d'état
 - Nombre d'entrée dans les multiplexeur :
   - Si aucune optimisation neaucoup d'entrée dans un mux
   - Eth, IP, TCP :
     - combinaisons sans optimisation : Eth; IP; TCP; Eth, IP; Eth,IP,TCP; IP,TCP; Eth, TCP
     - Avec optimisation : Eth; Eth,IP; Eth,IP,TCP;
     - Analyse du nombre d'entrée pour le Mux de bit(0) avec et sant optimisation (On ne prend pas le Payload en compte):
       - Besoin de 64 Mux -> 5*64=420 LUT san opt avec opt : 2*64=128 LUT
       - payload : 6*64=384 LUT , 3*64=192
         | Sans optimisation | Etats        | Avec Optimisation | Etats     |
         |-------------------+--------------+-------------------+-----------|
         | Eth(0)            | [0, 3, 4, 5] | Eth(0)            | [0, 1, 2] |
         | Eth(64)           | [0, 3, 4, 5] | Eth(64)           | [0, 1, 2] |
         | IP(0)             | [1, 6]       | IP(16)            | [1, 2]    |
         | IP(16)            | [3, 5]       | IP(80)            | [1, 2]    |
         | IP(64)            | [1, 6]       | IP(144)           | [1, 2]    |
         | IP(80)            | [3, 5]       | TCP(48)           | [2]       |
         | IP(128)           | [1, 6]       | TCP(112)          | [2]       |
         | IP(144)           | [3, 5]       | Payload(16)       | [0, 2]    |
         | TCP(0)            | [2]          | Payload(48)       | [1]       |
         | TCP(16)           | [4]          |                   |           |
         | TCP(32)           | [6]          |                   |           |
         | TCP(48)           | [5]          |                   |           |
         | TCP(64)           | [2]          |                   |           |
         | TCP(80)           | [4]          |                   |           |
         | TCP(96)           | [6]          |                   |           |
         | TCP(112)          | [5]          |                   |           |
         | TCP(128)          | [2]          |                   |           |
         | TCP(144)          | [4]          |                   |           |
         | Payload(0)        | [6]          |                   |           |
         | Payload(16)       | [0, 5]       |                   |           |
         | Payload(32)       | [1, 2]       |                   |           |
         | Payload(48)       | [3, 4]       |                   |           |
         |-------------------+--------------+-------------------+-----------|
         | Tot no payload    | 18           | Tot no Payload    | 7         |
         | LUT no payload    | 5            | LUT no Payload    | 2         |
         | Tot Payload       | 22           | Tot Payload       | 9         |
         | LUT Payload       | 6            | LUT Payload       | 3         |

     - Bus de 128 bits : bit(0)
       - Besoin de 128 Mux -> 3*128 = 384 LUT sans opt et 128LUT avec opt
       - avec Payload : 4*128=512 LUT, 2*128=256 LUT
         | Sans optimisation | Etats        | Avec Optimisation | Etats     |
         |-------------------+--------------+-------------------+-----------|
         | Eth(0)            | [0, 3, 4, 5] | Eth(0)            | [0, 1, 2] |
         | IP(0)             | [1, 6]       | IP(16)            | [1, 2]    |
         | IP(16)            | [3, 5]       | IP(144)           | [1, 2]    |
         | IP(128)           | [1, 6]       | TCP(112)          | [2]       |
         | IP(144)           | [3, 5]       | Payload(16)       | [0]       |
         | TCP(0)            | [2]          | Payload(80)       | [2]       |
         | TCP(16)           | [4]          | Payload(112)      | [1]       |
         | TCP(96)           | [6]          |                   |           |
         | TCP(112)          | [5]          |                   |           |
         | TCP(128)          | [2]          |                   |           |
         | TCP(144)          | [4]          |                   |           |
         | Payload(16)       | [0]          |                   |           |
         | Payload(64)       | [6]          |                   |           |
         | Payload(80)       | [5]          |                   |           |
         | Payload(96)       | [1, 2]       |                   |           |
         | Payload(112)      | [3, 4]       |                   |           |
         |-------------------+--------------+-------------------+-----------|
         | Tot no payload    | 11           | Tot no Payload    | 4         |
         | LUT no payload    | 3            | LUT no Payload    | 1         |
         | Tot Payload       | 16           | Tot Payload       | 7         |
         | LUT Payload       | 4            | LUT Payload       | 2         |
         

** Objectif
*** Généraux
 - regarder une architecture efficace pour un deparser sur FPGA
 - Voir l'intéret pour l'optimisation du graphe de deparsage.
 - Efficacité de l'utilisation de cocotb

*** Métriques
 - Ressource / entête / taille
 - Gain par l'optimisation du graphe
 - Précision de prédiction

*** Hypothèses
  - Les protocoles supporté sont défini dans le P4
  - On réimplémente le code P4 à chaque changement
  - L'architecture doit être automatiquement générée.


** Contribution
*** New architecture
 
*** Compiler
 
*** Test (cocotb)
 

** Architecture overview

*** Test platform
Cocotb allows :
  - Simpler test framework
  - Packet generation
  - Python integration
  - Focus on the test not the details

*** Hardware design
- Takes a PHV and Payload as input.
  - Payload on AXI4stream interface
  - PHV Bus :
    - A bus of all header
    - Each Header has a validity bit.
- Generates an AXI stream packet output
- Muxes
  - connect some element of PHV to output bus.
  - Control with a state machine
  - 1 state machine per mux, can be seen as a /VLIW/
- Inputs of muxes and state machines depend on the P4 code

*** Compiler
    #+INCLUDE: "compiler.org"


** Implementation results

*** test on a real platform ?

*** Maximum throughput

*** Ressource consumption 
- Comparison with Xilinx
- Comparison with netcope ?

*** Impact of graph reduction

*** Compilation time ?


** related work
- NetFPGA
- Netcope
- Xilinx SDNet
- Parsers ?

  
* Hardware [0%]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :ORDERED:  t
  :END:
** TODO Eth-IPv4-TCP 
*** TODO Ordre indépendant
*** TODO Ordonné
** TODO Eth-IPv4-TCP-Payload
*** TODO Ordre indépendant
*** TODO Ordonné
** TODO Eth-IPv4-IPv6-TCP-Payload
*** TODO Ordre indépendant
*** TODO Ordonné
** TODO Eth-IPv4-IPv6-TCP-UDP-Payload
*** TODO Ordre indépendant
*** TODO Ordonné

    
* Simulation [29%]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :ORDERED:  t
  :END:
** TODO Monitor
*** DONE Monitor AXI-stream packets
*** DONE structure of received values ?
    - Fonctions utile faite pour convertir les paquets en format BinaryValue et scapy
    - Les transaction sont des BinaryValue utilisé par le scoreboard
    - Il est possible de déterminer les transcation à l'aide des fonctions utiles
** TODO scapy to PHV
*** TODO headers to PHV
**** DONE simple header with signals
     Function to assign and parse
**** DONE validate byte order
**** TODO check on autogeneration
**** TODO Generate parser file for function
**** TODO set expected output from monitor
*** TODO Payload
** [25%] model.py
*** TODO structure of the file
- How do we represent function
- Standard input output
*** TODO parser model
*** TODO deparser model
*** DONE convertion between BinaryValue and scapy
** TODO PHV to axi-stream
*** TODO the deparser

    
* Compilation [7%]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :ORDERED:  t
  :END:
** TODO [50%] JSON to tikz
   - basic python class to extract info
   - gen graphs for from parser and deparser
   - Can generate VHDL for Muxes
*** DONE Only headers
*** TODO Integrate Payload
** TODO JSON to VHDL
** TODO JSON to cocotb
** TODO Optimization
*** TODO Eth-IP-TCP (only one possible futur header)
*** TODO Eth-IPv4-IPv6-TCP (2 paths)
*** TODO Eth-IPv4-IPv6-TCP-UDP (4 paths)
*** TODO Add header
*** TODO remove header
*** TODO conditionnal add
*** TODO conditionnal remove

* Idée approche article :
- https://ieeexplore.ieee.org/abstract/document/6665177
- Les challenge pour scale
- corundum : http://cseweb.ucsd.edu/~snoeren/papers/corundum-fccm20.pdf

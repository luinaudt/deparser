* Deparser Graph generation
The deparser is generated in P4 by an ordered set of emit functions.
Through this section, we will consider the code below.
#+begin_example
emit(eth)
emit(IPv4)
emit(IPv6)
emit(TCP)
emit(UDP)
#+end_example

The resulting pseudocode to implement this deparser is :
#+begin_example
FOREACH i in [eth, IPv4, IPv6, TCP, UDP]:
    if i.isValid():
        emit(i)
#+end_example
From this code we can generate the corresponding graph, G, represented in figure [[fig:deparser:ori:e46tu]].
Each Node implement the conditional insertion.

#+CAPTION: deparser graph generated from emit statements
#+NAME: fig:deparser:ori:e46tu
#+attr_latex: :width 50px
[[file:./images/compiler/GraphOri_e46tu.png]]

If we apply a closure to this Graph, we obtain the graph, G_c,  presented in Figure [[fig:deparser:closed:e46tu]].
In this case, we can process the condition with an edge.
We obtain the following pseudo code:
#+begin_example
currentNode = start
nextNode=true
WHILE nextNode:
    FOREACH i in currentNode.nextNodes:
        if i.isValid():
            emit(i)
            currentNode=i
        break
#+end_example

#+CAPTION: Closed deparser graph.
#+NAME: fig:deparser:closed:e46tu
#+attr_latex: :width 100px
[[file:./images/compiler/GraphClosed_e46tu.png]]

When we compile the deparser, it is possible to have a liveness analysis of the Header.
This analysis can be seen as the sets of headers that can enter the deparser.
If we have a pipeline whithout insertion or deletion of headers, then the possible input set of deparser is the possible output set of the parser.

Since the role of the deparser is to emit headers in a specific order, we only consider headers which can live at the same time. 
As a result, the parsing graph is only used to determine the headers living together at which can live at the same time.

The question is now, how can we simplify the graph considering a limited set of header living together.
As an example let's say that we can have four different sets of headers active :
  - eth, IPv4, UDP
  - eth, IPv4, TCP
  - eth, IPv6, UDP
  - eth, IPv6

The deparsing Graph, Gd, should be the one presented in figure [[fig:deparser:final:e46tu]] :

#+CAPTION: Graph generated for cases (eth, IPv4, TCP), (eth, IPv4, UDP), (eth,IPv6,UDP), (eth, IPv6)
#+NAME: fig:deparser:final:e46tu
#+attr_latex: :width 100px
[[file:./images/compiler/GraphFinal_e46tu.png]]

We can see this simplification as a reduction.
What we want is that for each possible set of active header having the smallest graph which garantee that all header will be emit.
This simplification can be seen as the transitive reduction of the graph, since it has been demonstrated by Moyles and Thompson that it garantee the reachability.

We propose the following algorithm:
#+begin_example 
Gd=emptyGraph
Gc=transitiveClosure(G)
FOREACH k in set_of_live_header
    tmp =transitiveClosure(Gc[k]) // the induce sub graph with set of vertex k
    Gd = Gd U tmp
#+end_example

* Possible cases generation
Once we can generate the deparser graph by determining the possible active headers, it is essential to be able to determine the sets of active headers.

The possible set of headers at the output of the parser correspond to the list of possible path in the parser graph.
Once this has been generated for each set we have to analyze the liveness of headers in the control.
This liveness of an header can only be influenced by the P4 headers functions : =setValid()=, =setInvalid()= wchich rescpectfully activate an header or deactivate an header.

First we extract the set of Parser liveness from the parser Graph.
An example of a parser Graph is given in [[fig:parser:e46tu]]. 
To determine the set of header living together, generate the list of path between =init= and =end=.

#+CAPTION: Parser graph for standard eth, IPv4, IPv6, TCP, UDP.
#+NAME: fig:parser:e46tu
#+attr_latex: :width 100px
[[./images/compiler/GraphParser_e46tu.png]]

 

* Generate VHDL
- edges label represnts condition for header validity.
- each node has a name which indicate lower significant bit

* source
- https://github.com/cornell-netlab/p4check/blob/master/examples/open_switch.p4
- https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1347584
  
